pipelines:
  - name: release_build_info
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: java
            versions:
              - "8.0.0"
      environmentVariables:
        readOnly:
          NEXT_VERSION: 0.0.0
          NEXT_DEVELOPMENT_VERSION: 0.0.x-SNAPSHOT
          NEXT_GRADLE_VERSION: 0.0.0
          NEXT_GRADLE_DEVELOPMENT_VERSION: 0.0.x-SNAPSHOT

    steps:
      - name: Release
        type: Bash
        configuration:
          inputResources:
            - name: biReleaseGit
          integrations:
            - name: ecosystem_automation
            - name: il_automation
            - name: mvn_central
        execution:
          onExecute:
            - cd $res_biReleaseGit_resourcePath

            # Set env
            - export CI=true
            - export JFROG_BUILD_STATUS=PASS
            - export JFROG_CLI_BUILD_NAME=ecosystem-build-info-release
            - export JFROG_CLI_BUILD_NUMBER=$run_number
            - export JFROG_CLI_BUILD_PROJECT=ecosys

            # Configure git
            - git checkout master
            - git remote set-url origin https://$int_il_automation_token@github.com/jfrog/build-info.git

            # Make sure versions provided
            - echo "Checking variables"
            - test -n "$NEXT_VERSION" -a "$NEXT_VERSION" != "0.0.0"
            - test -n "$NEXT_GRADLE_VERSION" -a "$NEXT_GRADLE_VERSION" != "0.0.0"
            - test -n "$NEXT_DEVELOPMENT_VERSION" -a "$NEXT_DEVELOPMENT_VERSION" != "0.0.0"
            - test -n "$NEXT_GRADLE_DEVELOPMENT_VERSION" -a "$NEXT_GRADLE_DEVELOPMENT_VERSION" != "0.0.0"

            # Configure JFrog CLI
            - curl -fL https://getcli.jfrog.io | bash -s v2 && chmod +x jfrog
            - ./jfrog c add internal --url=$int_ecosystem_automation_url --access-token=$int_ecosystem_automation_token
            - ./jfrog rt gradlec --use-wrapper --uses-plugin --repo-resolve jcenter --repo-deploy oss-release-local

            # Update version
            - sed -i -e "/build-info-version=/ s/=.*/=$NEXT_VERSION/" -e "/build-info-extractor-gradle-version=/ s/=.*/=$NEXT_GRADLE_VERSION/" gradle.properties
            - git commit -am "[artifactory-release] Release version ${NEXT_VERSION} [skipRun]" --allow-empty
            - git tag build-info-extractor-${NEXT_VERSION}
            - git tag build-info-gradle-extractor-${NEXT_GRADLE_VERSION}
            - git push
            - git push --tags

            # Run install and publish
            - >
              ORG_GRADLE_PROJECT_signingKey=$(echo $int_mvn_central_signingKey | base64 -d)
              ORG_GRADLE_PROJECT_signingPassword=$int_mvn_central_signingPassword
              ./jfrog rt gradle clean aP -x test -Psign
              - ./jfrog rt bag && ./jfrog rt bce
              - ./jfrog rt bp
              - ./jfrog rt bs

            # Distribute release bundle
            - ./jfrog ds rbc --spec=./ci/distribution/prod-filespec.json $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER --spec-vars="version=$JFROG_CLI_BUILD_NUMBER" --sign
            - ./jfrog ds rbd $JFROG_CLI_BUILD_NAME $JFROG_CLI_BUILD_NUMBER --site="releases.jfrog.io"

            # Publish to Maven Central
            - >
              ORG_GRADLE_PROJECT_sonatypeUsername=$int_mvn_central_user
              ORG_GRADLE_PROJECT_sonatypePassword=$int_mvn_central_password
              ORG_GRADLE_PROJECT_signingKey=$(echo $int_mvn_central_signingKey | base64 -d)
              ORG_GRADLE_PROJECT_signingPassword=$int_mvn_central_signingPassword
              ./gradlew clean build publishToSonatype closeAndReleaseSonatypeStagingRepository -x test -Psign

            # Update next development version
            - sed -i -e "/build-info-version=/ s/=.*/=$NEXT_DEVELOPMENT_VERSION/" -e "/build-info-extractor-gradle-version=/ s/=.*/=$NEXT_GRADLE_DEVELOPMENT_VERSION/" gradle.properties
            - git commit -am "[artifactory-release] Next development version [skipRun]"

            # Push changes
            - git push
