import com.github.benmanes.gradle.versions.VersionsPlugin

buildscript {
    ext {
        antVersion = '1.10.12'
        buildInfoExtractorVersion = '4.29.4'
        commonsCodecVersion = '1.16.0'
        commonsCompressVersion = '1.24.0'
        commonsIoVersion = '2.13.0'
        commonsLang3Version = '3.13.0'
        commonsLoggingVersion = '1.2'
        dockerJavaVersion = '3.3.3'
        easymockclassextensionVersion = '3.2'
        eclipseAetherVersion = '1.1.0'
        fileSpecsJavaVersion = '1.1.2'

        // 0.43+ fail with java.lang.NoClassDefFoundError: groovy/xml/XmlSlurper
        gradleVersionsPluginVersion = '0.42.0'

        groovyAllVersion = '3.0.13'
        guavaVersion = '32.1.2-jre'
        httpClientVersion = '4.5.14'
        httpCoreVersion = '4.4.16'
        ivyVersion = '2.5.2'
        jacksonVersion = '2.15.2'
        jdomVersion = '2.0.6.1'
        jsrVersion = '3.0.2'
        mavenVersion = '3.8.6'
        mavenDeployPluginVersion = '3.0.0'
        p4JavaVersion = '2022.1.2350821'

        plexusCipherVersion = '2.0'

        //TODO: Plexus Component Annotations is deprecated
        // See: https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/
        plexusComponentAnnotationsVersion = '2.1.1'

        //TODO: Plexus Container is deprecated
        // See https://codehaus-plexus.github.io/plexus-containers/index.html
        plexusContainerVersion = '2.1.1'

        plexusUtilsVersion = '3.5.0'

        // 1.0.0 fails with 'Could not find method plugins()'
        pluginPublishPlugin = '0.21.0'

        publishPluginVersion = '1.1.0'
        slf4jVersion = '1.7.36'
        sonatypeAetherVersion = '1.13.1'

        // 7.6+ require Java 11
        testNgVersion = '6.14.3'

        woodstoxVersion = '6.4.0'
        jerseyVersion = '2.34'
    }

    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }

        dependencies {
            classpath "com.gradle.publish:plugin-publish-plugin:$pluginPublishPlugin"
            classpath "io.github.gradle-nexus:publish-plugin:$publishPluginVersion"
            classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$buildInfoExtractorVersion"
            classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
        }
    }
}

apply plugin: "com.jfrog.artifactory"
apply plugin: 'io.github.gradle-nexus.publish-plugin'

import org.apache.tools.ant.filters.ReplaceTokens
import org.jfrog.build.Version

// Root project version should not be used
project.version = '2'
project.ext.baseProjectNames = ['build-info-api', 'build-info-client', 'build-info-extractor', 'build-info-vcs']

defaultTasks 'clean', 'build', 'publishToMavenLocal'

task install {
    dependsOn allprojects.collect { proj ->
        proj.tasks.matching {
            it.name == 'publishToMavenLocal'
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: VersionsPlugin
    apply plugin: 'idea'
    group = 'org.jfrog.buildinfo'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://releases.jfrog.io/artifactory/oss-snapshot-local" }
    }
}

def baseProjects() {
    subprojects.findAll { p -> baseProjectNames.contains(p.name) }
}

def extractorProjects() {
    subprojects.findAll { p -> !baseProjectNames.contains(p.name) }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    // testng version <7.6 required for Java 8
    // testng version 7.6+ required for Java 11
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext.buildInfoVersion = new Version(rootProject, baseProjectNames)

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        implementation group: 'commons-io', name: 'commons-io', version: commonsIoVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
        implementation group: 'org.apache.commons', name: 'commons-compress', version: commonsCompressVersion

        implementation("org.apache.httpcomponents:httpclient:$httpClientVersion") {
            exclude module: "commons-codec"
        }

        implementation "org.apache.httpcomponents:httpcore:$httpCoreVersion"
        implementation "commons-codec:commons-codec:$commonsCodecVersion"
        implementation group: 'com.google.guava', name: 'guava', 'version': guavaVersion
        implementation group: 'org.jfrog.filespecs', name: 'file-specs-java', version: fileSpecsJavaVersion

        testImplementation group: 'org.testng', name: 'testng', version: testNgVersion
    }

    idea.module {
        downloadJavadoc = false
        downloadSources = true
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    task uberJar(type: Jar) {
        from {
            configurations.uberJar.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }

        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        with jar
        archiveClassifier.set('uber')
    }

    def versionPrefix = project.name.contains("gradle") ? "build-info-extractor-gradle" : "build-info"
    publishing {
        def publication = publications.create(project.name, MavenPublication) {
            artifactId = project.name
            version = project.findProperty(versionPrefix + "-version") ?: buildInfoVersion
            from components.java

            artifact sourcesJar
            artifact javadocJar
            if (project in extractorProjects()) {
                artifact uberJar
            }

            pom {
                name = project.name
                description = project.description ?: "JFrog Build-Info"
                url = 'https://www.jfrog.com/confluence/display/JFROG/Build+Integration'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'JFrog'
                        email = 'eco-system@jfrog.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jfrog/build-info.git'
                    developerConnection = 'scm:git:git@github.com:jfrog/build-info.git'
                    url = 'https://github.com/jfrog/build-info'
                }
            }
        }
        signing {
            required { project.hasProperty('sign') }
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publication
        }

        artifactoryPublish {
            publications(publication)
        }
    }

    test {
        test.useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
        project.properties['excludeTests']?.split(',').each {
            exclude "${it}"
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

configure(baseProjects()) {
    version = buildInfoVersion
    status = version.status
    configurations {
        uberJar {
            description = 'All jars that should be included in the Uber Jar'
            transitive = true
        }
    }
}

// Create configurations for the extractor projects
configure(extractorProjects()) {
    apply plugin: 'maven-publish'

    it.version = new Version(it)
    it.status = version.status
    configurations {
        provided
        sources
        uberJar {
            description = 'All jars that should be included in the Uber Jar'
            transitive = true
        }
        compile {
            extendsFrom uberJar
            extendsFrom provided
        }
    }

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        implementation project(':build-info-client')
        implementation project(':build-info-api')
        uberJar project(':build-info-extractor')
        testImplementation(testFixtures(project(':build-info-extractor')))
    }

    assemble {
        dependsOn uberJar
    }
}

// Declare the root project to build its children first
evaluationDependsOnChildren()

project('build-info-api') {
    description = 'JFrog Build-Info API'
    dependencies {
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
        implementation group: 'org.apache.commons', name: 'commons-compress', version: commonsCompressVersion
    }
}

project('build-info-client') {
    description = 'JFrog Build-Info Client'
    dependencies {
        implementation project(':build-info-api')

        implementation("org.apache.httpcomponents:httpclient:$httpClientVersion") {
            exclude module: "commons-codec"
        }

        implementation "org.apache.httpcomponents:httpcore:httpCoreVersion"
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
        implementation "commons-codec:commons-codec:$commonsCodecVersion"

        sourceSets {
            main {
                resources {
                    srcDir 'src/main/filtered-resources'
                }
            }
        }

        processResources {
            from(sourceSets.main.resources.srcDirs) {
                include '**/*bi.client.properties'
                filter(ReplaceTokens, tokens: ['project.version': project.version.toString()])
            }
        }
    }
}

project('build-info-extractor') {
    apply plugin: 'java-test-fixtures'
    description = 'JFrog Build-Info Extractor'

    dependencies {
        implementation project(':build-info-client')
        implementation project(':build-info-api')

        testImplementation "org.easymock:easymockclassextension:$easymockclassextensionVersion"
        testImplementation('org.mock-server:mockserver-netty:5.15.0') {
            exclude module: 'snakeyaml'
            exclude module: 'json-smart'
            exclude module: 'rhino'
        }
        testImplementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'
        testImplementation group: 'net.minidev', name: 'json-smart', version: '2.4.9'
        testImplementation group: 'org.mozilla', name: 'rhino', version: '1.7.12'
        testFixturesApi project(':build-info-client')
        testFixturesApi project(':build-info-api')
        testFixturesApi "org.apache.httpcomponents:httpclient:$httpClientVersion"
        testFixturesApi group: 'commons-io', name: 'commons-io', version: commonsIoVersion
        testFixturesApi group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version
        testFixturesApi group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
        testFixturesApi group: 'org.testng', name: 'testng', version: testNgVersion
        testFixturesApi group: 'org.jfrog.filespecs', name: 'file-specs-java', version: fileSpecsJavaVersion
    }
}

project('build-info-vcs') {
    description = 'JFrog Build-Info VCS'
    dependencies {
        implementation(group: 'com.perforce', name: 'p4java', version: p4JavaVersion)
    }
}

project('build-info-extractor-ivy') {
    description = 'JFrog Build-Info Ivy Extractor'

    dependencies {
        uberJar "org.slf4j:slf4j-api:$slf4jVersion"
        provided "com.google.code.findbugs:jsr305:$jsrVersion",
                "org.apache.ivy:ivy:$ivyVersion",
                "org.apache.ant:ant:$antVersion"
    }
}

project('build-info-extractor-gradle') {
    apply plugin: 'com.gradle.plugin-publish'
    apply plugin: 'java-gradle-plugin'
    description = 'JFrog Build-Info Gradle Extractor'

    sourceSets.test.resources {
        srcDir file('build/pluginUnderTestMetadata')
    }

    dependencies {
        implementation gradleApi()
        implementation fileTree(dir: "${gradle.gradleHomeDir}/lib/plugins", include: '**/*.jar')
        //workaround for GRADLE-1699
        provided "org.codehaus.plexus:plexus-component-annotations:$plexusComponentAnnotationsVersion",
                "com.google.code.findbugs:jsr305:$jsrVersion"
        uberJar group: 'org.apache.ivy', name: 'ivy', version: ivyVersion
        implementation localGroovy()
        testImplementation gradleTestKit()
    }

    gradlePlugin {
        testSourceSets sourceSets.test
    }

    pluginBundle {
        website = 'https://www.jfrog.com/confluence/display/JFROG/Gradle+Artifactory+Plugin'
        vcsUrl = 'https://github.com/jfrog/build-info'
        description = 'JFrog Gradle plugin for Build Info extraction and Artifactory publishing.'
        tags = ['Artifactory']

        plugins {
            artifactoryPlugin {
                id = 'com.jfrog.artifactory'
                displayName = 'Gradle Artifactory plugin'
            }
        }

        mavenCoordinates {
            groupId = project.getGroup()
            artifactId = project.getName()
            version = project.property("build-info-extractor-gradle-version")
        }
    }

    // Generate "build/pluginUnderTestMetadata/plugin-under-test-metadata.properties"
    tasks.test.dependsOn("pluginUnderTestMetadata")
    // Generate "build/libs/*"
    tasks.test.dependsOn("assemble")
}

project('build-info-extractor-maven3') {
    description = 'JFrog Build-Info Maven 3 Extractor'

    dependencies {
        implementation "org.jdom:jdom2:$jdomVersion",
                "org.codehaus.groovy:groovy-all:$groovyAllVersion",
                "org.codehaus.plexus:plexus-container-default:$plexusContainerVersion",
                "org.sonatype.aether:aether-api:$sonatypeAetherVersion",
                "org.sonatype.aether:aether-util:$sonatypeAetherVersion",
                "org.sonatype.aether:aether-impl:$sonatypeAetherVersion",
                "org.eclipse.aether:aether-api:$eclipseAetherVersion",
                "org.eclipse.aether:aether-util:$eclipseAetherVersion",
                "org.eclipse.aether:aether-impl:$eclipseAetherVersion",
                "org.codehaus.plexus:plexus-utils:$plexusUtilsVersion",
                "org.apache.maven:maven-repository-metadata:$mavenVersion",
                "org.apache.maven:maven-model:$mavenVersion",
                "org.codehaus.plexus:plexus-cipher:$plexusCipherVersion"

        implementation("org.apache.maven.plugins:maven-deploy-plugin:$mavenDeployPluginVersion") {
            exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
            exclude group: 'org.apache.maven', module: 'maven-model'
        }

        implementation("org.apache.maven:maven-core:$mavenVersion") {
            exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
            exclude group: 'org.apache.maven', module: 'maven-model'
            exclude group: 'org.sonatype.plexus', module: 'plexus-cipher'
        }

        uberJar "org.eclipse.aether:aether-impl:$eclipseAetherVersion"
        provided "org.codehaus.plexus:plexus-component-annotations:$plexusComponentAnnotationsVersion"
        testImplementation "org.easymock:easymockclassextension:$easymockclassextensionVersion"
    }
}

project('build-info-extractor-npm') {
    description = 'JFrog Build-Info npm Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    }
}

project('build-info-extractor-docker') {
    apply plugin: 'java-test-fixtures'
    description = 'JFrog Build-Info Docker Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
        implementation(group: 'com.github.docker-java', name: 'docker-java', version: dockerJavaVersion) {
            exclude group: 'org.glassfish.jersey.core', module: 'jersey-common'
        }
        implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: jerseyVersion
    }
}

project('build-info-extractor-go') {
    description = 'JFrog Build-Info Go Extractor'
}

project('build-info-extractor-pip') {
    description = 'JFrog Build-Info Pip Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    }
}

project('build-info-extractor-nuget') {
    description = 'JFrog Build-Info NuGet Extractor'

    dependencies {
        implementation(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: jacksonVersion) {
            exclude group: 'com.fasterxml.woodstox', module: 'woodstox-core'
        }

        implementation group: 'com.fasterxml.woodstox', name: 'woodstox-core', version: woodstoxVersion
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        wildcards += '?*.gradle'
        idea.project.ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
            }
        }
    }

    module {
        excludeDirs += file('out')
        iml.withXml {
            provider ->
                provider.node.component.first().appendNode('orderEntry', [type: 'library', name: 'Groovy', level: 'application'])
        }
    }
}
