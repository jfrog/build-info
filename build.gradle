buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        dependencies {
            classpath "com.gradle.publish:plugin-publish-plugin:+"
            classpath "io.github.gradle-nexus:publish-plugin:+"
            classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.24.5"
        }
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'idea'
}

apply plugin: "com.jfrog.artifactory"

import org.apache.tools.ant.filters.ReplaceTokens
import org.jfrog.build.Version

String testNgVersion = '6.10'

// Root project version should not be used
project.version = '2'
project.ext.baseProjectNames = ['build-info-api', 'build-info-client', 'build-info-extractor', 'build-info-vcs']

defaultTasks 'clean', 'build', 'publishToMavenLocal'

task install {
    dependsOn allprojects.collect { proj ->
        proj.tasks.matching {
            it.name == 'publishToMavenLocal'
        }
    }
}

allprojects {
    apply plugin: 'java'
    group = 'org.jfrog.buildinfo'

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://releases.jfrog.io/artifactory/oss-snapshot-local" }
    }
}

def baseProjects() {
    subprojects.findAll { p -> baseProjectNames.contains(p.name) }
}

def extractorProjects() {
    subprojects.findAll { p -> !baseProjectNames.contains(p.name) }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    ext.buildInfoVersion = new Version(rootProject, baseProjectNames)

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
        implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
        implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.5.1'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.5'
        implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'
        implementation("org.apache.httpcomponents:httpclient:4.5.13") {
            exclude module: "commons-codec"
        }
        implementation 'org.apache.httpcomponents:httpcore:4.4.5'
        implementation "commons-codec:commons-codec:1.13"
        implementation group: 'com.google.guava', name: 'guava', 'version': '30.0-jre'
        implementation group: 'org.jfrog.filespecs', name: 'file-specs-java', version: '1.1.1'
        testImplementation group: 'org.testng', name: 'testng', version: testNgVersion
    }

    idea.module {
        downloadJavadoc = false
        downloadSources = true
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set('sources')
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
    }

    task uberJar(type: Jar) {
        from {
            configurations.uberJar.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        with jar
        archiveClassifier.set('uber')
    }

    def versionPrefix = project.name.contains("gradle") ? "build-info-extractor-gradle" : "build-info"
    publishing {
        def publication = publications.create(project.name, MavenPublication) {
            artifactId = project.name
            version = project.findProperty(versionPrefix + "-version") ?: buildInfoVersion
            from components.java

            artifact sourcesJar
            artifact javadocJar
            if (project in extractorProjects()) {
                artifact uberJar
            }

            pom {
                name = project.name
                description = project.description ?: "JFrog Build-Info"
                url = 'https://www.jfrog.com/confluence/display/JFROG/Build+Integration'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'JFrog'
                        email = 'eco-system@jfrog.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jfrog/build-info.git'
                    developerConnection = 'scm:git:git@github.com:jfrog/build-info.git'
                    url = 'https://github.com/jfrog/build-info'
                }
            }
        }
        signing {
            required { project.hasProperty('sign') }
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publication
        }

        artifactoryPublish {
            publications(publication)
        }
    }

    test {
        test.useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

configure(baseProjects()) {
    version = buildInfoVersion
    status = version.status
    configurations {
        uberJar {
            description = 'All jars that should be included in the Uber Jar'
            transitive = true
        }
    }
    dependencies {
        implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.19'
    }
}

// Create configurations for the extractor projects
configure(extractorProjects()) {
    apply plugin: 'maven-publish'

    it.version = new Version(it)
    it.status = version.status
    configurations {
        provided
        sources
        uberJar {
            description = 'All jars that should be included in the Uber Jar'
            transitive = true
        }
        compile {
            extendsFrom uberJar
            extendsFrom provided
        }
    }

    dependencies {
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
        implementation project(':build-info-client')
        implementation project(':build-info-api')
        uberJar project(':build-info-extractor')
        testImplementation(testFixtures(project(':build-info-extractor')))
    }

    assemble {
        dependsOn uberJar
    }
}

// Declare the root project to build its children first
evaluationDependsOnChildren()

project('build-info-api') {
    description = 'JFrog Build-Info API'
    dependencies {
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.5.1'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.5'
        implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'
    }
}

project('build-info-client') {
    description = 'JFrog Build-Info Client'
    dependencies {
        implementation project(':build-info-api')
        implementation("org.apache.httpcomponents:httpclient:4.5.13") {
            exclude module: "commons-codec"
        }
        implementation 'org.apache.httpcomponents:httpcore:4.4.5'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.5'
        implementation "commons-codec:commons-codec:1.13"
        sourceSets {
            main {
                resources {
                    srcDir 'src/main/filtered-resources'
                }
            }
        }

        processResources {
            from(sourceSets.main.resources.srcDirs) {
                include '**/*bi.client.properties'
                filter(ReplaceTokens, tokens: ['project.version': project.version.toString()])
            }
        }
    }
}

project('build-info-extractor') {
    apply plugin: 'java-test-fixtures'
    description = 'JFrog Build-Info Extractor'
    dependencies {
        implementation project(':build-info-client')
        implementation project(':build-info-api')

        testImplementation "org.easymock:easymockclassextension:2.5.2"
        testFixturesApi project(':build-info-client')
        testFixturesApi project(':build-info-api')
        testFixturesApi "org.apache.httpcomponents:httpclient:4.5.13"
        testFixturesApi group: 'commons-io', name: 'commons-io', version: '2.8.0'
        testFixturesApi group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
        testFixturesApi group: 'org.testng', name: 'testng', version: testNgVersion
        testFixturesApi group: 'org.jfrog.filespecs', name: 'file-specs-java', version: '1.1.0'
    }
}

project('build-info-vcs') {
    description = 'JFrog Build-Info VCS'
    dependencies {
        implementation(group: 'com.perforce', name: 'p4java', version: '2015.1.1210280')
    }
}

project('build-info-extractor-ivy') {
    description = 'JFrog Build-Info Ivy Extractor'
    dependencies {
        uberJar "org.slf4j:slf4j-api:1.5.8"
        provided "com.google.code.findbugs:jsr305:1.3.9",
                "org.apache.ivy:ivy:2.2.0",
                "org.apache.ant:ant:1.10.12"
    }
}

project('build-info-extractor-gradle') {
    apply plugin: 'com.gradle.plugin-publish'
    apply plugin: 'java-gradle-plugin'
    description = 'JFrog Build-Info Gradle Extractor'

    sourceSets.test.resources {
        srcDir file('build/pluginUnderTestMetadata')
    }

    dependencies {
        implementation gradleApi()
        implementation fileTree(dir: "${gradle.gradleHomeDir}/lib/plugins", include: '**/*.jar')
        //workaround for GRADLE-1699
        provided "org.codehaus.plexus:plexus-component-annotations:1.5.5",
                "com.google.code.findbugs:jsr305:1.3.9"
        uberJar group: 'org.apache.ivy', name: 'ivy', version: '2.2.0'
        implementation localGroovy()
        testImplementation gradleTestKit()
    }

    gradlePlugin {
        testSourceSets sourceSets.test
    }

    pluginBundle {
        website = 'https://www.jfrog.com/confluence/display/JFROG/Gradle+Artifactory+Plugin'
        vcsUrl = 'https://github.com/jfrog/build-info'
        description = 'JFrog Gradle plugin for Build Info extraction and Artifactory publishing.'
        tags = ['Artifactory']

        plugins {
            artifactoryPlugin {
                id = 'com.jfrog.artifactory'
                displayName = 'Gradle Artifactory plugin'
            }
        }

        mavenCoordinates {
            groupId = project.getGroup()
            artifactId = project.getName()
            version = project.property("build-info-extractor-gradle-version")
        }
    }

    // Generate "build/pluginUnderTestMetadata/plugin-under-test-metadata.properties"
    tasks.test.dependsOn("pluginUnderTestMetadata")
    // Generate "build/libs/*"
    tasks.test.dependsOn("assemble")
}

project('build-info-extractor-maven3') {
    description = 'JFrog Build-Info Maven 3 Extractor'

    dependencies {
        implementation 'org.jdom:jdom:1.1.1',
                'org.codehaus.groovy:groovy-all:2.4.21',
                'plexus:plexus-container-default:1.0-alpha-6',
                'org.sonatype.aether:aether-api:1.13.1',
                'org.sonatype.aether:aether-util:1.13.1',
                'org.sonatype.aether:aether-impl:1.13.1',
                'org.eclipse.aether:aether-api:1.0.2.v20150114',
                'org.eclipse.aether:aether-util:1.0.2.v20150114',
                'org.eclipse.aether:aether-impl:1.0.2.v20150114',
                'org.codehaus.plexus:plexus-utils:3.0.10',
                'org.apache.maven:maven-repository-metadata:3.5.2',
                'org.apache.maven:maven-model:3.1.0'

        implementation('org.apache.maven.plugins:maven-deploy-plugin:2.8.2') {
            exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
            exclude group: 'org.apache.maven', module: 'maven-model'
        }
        implementation('org.apache.maven:maven-core:3.3.3') {
            exclude group: 'org.codehaus.plexus', module: 'plexus-utils'
            exclude group: 'org.apache.maven', module: 'maven-model'
        }

        uberJar 'org.eclipse.aether:aether-impl:1.0.2.v20150114'
        provided 'org.codehaus.plexus:plexus-component-annotations:1.6'
        testImplementation 'org.easymock:easymockclassextension:2.5.2'
    }
}

project('build-info-extractor-npm') {
    description = 'JFrog Build-Info npm Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    }
}

project('build-info-extractor-docker') {
    apply plugin: 'java-test-fixtures'
    description = 'JFrog Build-Info Docker Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
        implementation group: 'com.github.docker-java', name: 'docker-java', version: '3.2.12'
    }
}

project('build-info-extractor-go') {
    description = 'JFrog Build-Info Go Extractor'
}

project('build-info-extractor-pip') {
    description = 'JFrog Build-Info Pip Extractor'

    dependencies {
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    }
}

project('build-info-extractor-nuget') {
    description = 'JFrog Build-Info NuGet Extractor'

    dependencies {
        implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.11.1'
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        wildcards += '?*.gradle'
        idea.project.ipr {
            withXml { provider ->
                provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
            }
        }
    }

    module {
        excludeDirs += file('out')
        iml.withXml {
            provider ->
                provider.node.component.first().appendNode('orderEntry', [type: 'library', name: 'Groovy', level: 'application'])
        }
    }
}
